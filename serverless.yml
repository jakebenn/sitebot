service: generic-enterprise-chatbot

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 30
  profile: ${env:AWS_PROFILE, 'sitebot'}
  
  environment:
    NODE_ENV: ${self:provider.stage}
    DYNAMODB_TABLE_NAME: ${self:service}-sessions-${self:provider.stage}
    PERPLEXITY_API_KEY: ${env:PERPLEXITY_API_KEY, 'dummy-key-for-local-dev'}
    LOG_LEVEL: ${env:LOG_LEVEL, 'info'}
    DEFAULT_COMPANY: ${env:DEFAULT_COMPANY, 'vanguard'}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
          Resource:
            - Fn::GetAtt: [SessionsTable, Arn]
            - Fn::Sub: "${SessionsTable.Arn}/index/*"
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource:
            - Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/*"

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000
    websocketPort: 3001
    lambdaPort: 3002
    useChildProcesses: true
    noPrependStageInUrl: true

functions:
  websocketHandler:
    handler: src/handlers/websocket-handler.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect  
      - websocket:
          route: $default
      - websocket:
          route: sendMessage

  sessionCleanup:
    handler: src/handlers/session-cleanup.handler
    events:
      - schedule: rate(1 hour)

resources:
  Resources:
    WebSocketApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-websocket-${self:provider.stage}
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: $request.body.action

    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-sessions-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: TTL
          Enabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

  Outputs:
    WebSocketURI:
      Description: The WSS Protocol URI to connect to
      Value: 
        Fn::Sub: 'wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}'
      Export:
        Name: ${self:service}-websocket-uri-${self:provider.stage}

    SessionsTableName:
      Description: DynamoDB table name for sessions
      Value: ${self:service}-sessions-${self:provider.stage}
      Export:
        Name: ${self:service}-sessions-table-${self:provider.stage}
